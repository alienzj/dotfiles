# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [(modulesPath + "/installer/scan/not-detected.nix")];

  # Kernel
  boot = {
    initrd.availableKernelModules = [
      "xhci_pci"
      "vfio-pci"
      "ahci"
      "nvme"
      "usbhid"
      "usb_storage"
      "sd_mod"
      "sr_mod"
    ];
    initrd.kernelModules = [];
    kernelModules = [
      "tun"
      "vfio"
      "vfio_immmu_type1"
      "virtio"
      "vfio_pci"
      "kvm-amd"
    ];

    # https://discourse.nixos.org/t/external-mouse-and-keyboard-sleep-when-they-stay-untouched-for-a-few-seconds/14900/10
    ## energy savings
    #"mitigations=off"
    #"mem_sleep_default=deep"
    #"pcie_aspm.policy=powersupersave"
    kernelParams = [
      # didn't work
      #"usb.core.autosuspend=-1" # disable autosuspend
      #"usb.core.autosuspend=3600"  # 5 sencond # it seems no effect
    ];

    extraModulePackages = [];
    #extraModulePackages = with config.boot.kernelPackages; [ acpi_call ];

    extraModprobeConfig = lib.mkMerge [
      "options kvm_amd nested=1"
      "options kvm_amd emulate_invalid_guest_state=0"
      "options kvm ignore_msrs=1"
      # idle audio card after one second
      #"options snd_hda_amd power_save=1"
      # enable wifi power saving (keep uapsd off to maintain low latencies)
      #"options iwlwifi power_save=1 uapsd_disable=1"
    ];
    #crashDump.enable = true; # will build whole linux kernel, disable it
  };

  # Firmware
  services.fwupd.enable = true;

  # Hardware
  modules.hardware = {
    audio.enable = true;
    bluetooth.enable = true;
    fs = {
      enable = true;
      ssd.enable = true;
    };
    #sensors.enable = true;
    nvidia.enable = true;
    #https://discourse.nixos.org/t/usb-mouse-and-keyboard-poweroff-too-soon-udev/22459
    #mouse.enable = true;

    # power management
    power = {
      enable = true;
      isPC = true;
      cpuFreqGovernor = "performance";
      resumeDevice = "/dev/disk/by-uuid/e7e56401-3b27-4cb8-852b-9cc971f63512";
    };
  };

  services.udev.extraRules = ''
    # keyboard autosuspand
    ##ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="04d9", ATTR{idProduct}=="0209", ATTR{power/autosuspend}="-1"
    ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="04d9", ATTR{idProduct}=="0209", ATTR{power/control}="on"
    ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="04d9", ATTR{idProduct}=="0209", ATTR{power/autosuspend_delay_ms}="216000"

    # mouse autosuspand
    ##ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="1532", ATTR{idProduct}=="005e", ATTR{power/autosuspend}="-1"
    ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="1532", ATTR{idProduct}=="005e", ATTR{power/control}="on"
    ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="1532", ATTR{idProduct}=="005e", ATTR{power/autosuspend_delay_ms}="2160000"
  '';

  # CPU
  nix.settings.max-jobs = lib.mkDefault 12;
  hardware.cpu.amd.updateMicrocode = true;
  # monitors the temperature of the CPU and other components in the system
  #services.thermald = {
  #  enable = true; # Enable thermald service
  #  config = {
  #    sensors = ["coretemp"]; # List of sensors to monitor
  #    thresholds = {
  #      core0 = {
  #        critical = 75; # Temperature in Celsius
  #        emergency = 80;
  #      };
  #    };
  #  };
  #};

  # Displays
  services.xserver = {
    enable = true;
    exportConfiguration = true;
    xkb.layout = "us";
    serverFlagsSection = ''
      Option "StandbyTime" "0"
      Option "SuspendTime" "0"
      Option "HibernateTime" "0"
      Option "OffTime" "0"
      Option "BlankTime" "0"
    '';
  };

  ## Single monitor
  ## https://github.com/NixOS/nixpkgs/issues/30796
  services.xserver.displayManager.setupCommands = ''
    ${pkgs.xorg.xrandr}/bin/xrandr --dpi 168 --output HDMI-0 --mode 3840x2160 --rate 60 --pos 0x0 --primary
  '';

  # Mouse
  services.libinput = {
    enable = true;
    mouse.accelProfile = "flat";
  };

  # Filesystem
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/952cf267-a657-4abb-b121-5bebf3a103aa";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/C247-75AF";
    fsType = "vfat";
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/0dcf7734-5d12-4b60-8632-6a75196a31a7";
    fsType = "ext4";
  };

  fileSystems."/mnt/store" = {
    device = "/dev/disk/by-uuid/294a32c8-a7ab-4646-86c4-277dafc708b7";
    fsType = "ext4";
  };

  swapDevices = [{device = "/dev/disk/by-uuid/e7e56401-3b27-4cb8-852b-9cc971f63512";}];

  # Network
  #https://nixos.org/manual/nixos/stable/#sec-rename-ifs
  systemd.network.links."10-lan" = {
    matchConfig.PermanentMACAddress = "10:7b:44:8e:fe:b4";
    linkConfig.Name = "lan";
  };

  networking = {
    nameservers = ["223.5.5.5" "8.8.8.8"];
    #networkmanager.enable = true;
    firewall = {
      enable = true;
      allowedTCPPorts = [22 80 443 3389 8080];
      allowedUDPPorts = [22 80 443 3389 8080];
    };
    # Network
    interfaces.lan = {
      useDHCP = false;
      ipv4.addresses = [
        {
          address = "192.168.1.2";
          prefixLength = 24;
        }
      ];
    };
    # Gateway
    defaultGateway = {
      address = "192.168.1.1"; # ip route
      interface = "lan";
    };
  };

  #system.activationScripts = {
  #  rfkillUnblockBluetooth = {
  #    text = ''
  #    rfkill unblock bluetooth
  #    '';
  #    deps = [];
  #  };
  #};

  # User
  user.extraGroups = ["tss" "video"];

  # Platform
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
